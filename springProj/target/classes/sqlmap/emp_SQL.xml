<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace : xml파일이 여러개일 수 있으므로 
	이를 구별하기 위한 식별 용도로 사용
-->
<mapper namespace="kr.or.ddit.mapper.EmpMapper">
	
	<!-- 다음 직원번호를 가져옴 -->
	<select id="getEmpNum" resultType="String">
		SELECT A.FRONT||
		<![CDATA[
		       CASE WHEN LENGTH(A.EN) < 3 THEN LPAD(A.EN,3,0) 
	       ]]>
		       ELSE TO_CHAR(A.EN) END AS EMP_NUM
		FROM (SELECT NVL(SUBSTR(MAX(EMP_NUM), 1, 3), 'EMP') AS FRONT, 
					 NVL(SUBSTR(MAX(EMP_NUM), 4), 0)+1 AS EN
		        FROM EMP) A
	</select>

	<!-- 신규 직원 등록 및 수정 처리 -->
	<insert id="createPost" parameterType="empVO">
		<selectKey resultType="String" order="AFTER" keyProperty="empNum">
			SELECT MAX(EMP_NUM) FROM EMP
		</selectKey>

		MERGE INTO EMP A 
		USING DUAL
		ON(A.EMP_NUM = #{empNum}) 
		WHEN MATCHED THEN 
		    UPDATE SET EMP_ADDR = #{empAddr}, EMP_PNE = #{empPne}, 
		               EMP_NM = #{empNm}, EMP_PAY = #{empPay}, EMP_MJ_NUM = #{empMjNum}
		WHEN NOT MATCHED THEN 
		    INSERT(EMP_NUM, EMP_ADDR, EMP_PNE, EMP_NM, EMP_PAY, EMP_MJ_NUM)
		    VALUES((
		    	SELECT A.FRONT||
<![CDATA[				CASE WHEN LENGTH(A.EN) < 3 THEN LPAD(A.EN,3,0) 		       ]]>
				       	ELSE TO_CHAR(A.EN) END AS EMP_NUM
				FROM (SELECT NVL(SUBSTR(MAX(EMP_NUM), 1, 3), 'EMP') AS FRONT, 
							 NVL(SUBSTR(MAX(EMP_NUM), 4), 0)+1 AS EN
				        FROM EMP) A
		    ), #{empAddr}, #{empPne}, #{empNm}, #{empPay}, #{empMjNum})
	</insert>
<!-- 	<insert id="createPost" parameterType="empVO"> -->
<!-- 		<selectKey resultType="String" order="BEFORE" keyProperty="empNum"> -->
<!-- 			SELECT A.FRONT|| -->
<!-- <![CDATA[		CASE WHEN LENGTH(A.EN) < 3 THEN LPAD(A.EN,3,0) 		       ]]> -->
<!-- 		       	ELSE TO_CHAR(A.EN) END AS EMP_NUM -->
<!-- 		FROM (SELECT NVL(SUBSTR(MAX(EMP_NUM), 1, 3), 'EMP') AS FRONT,  -->
<!-- 					 NVL(SUBSTR(MAX(EMP_NUM), 4), 0)+1 AS EN -->
<!-- 		        FROM EMP) A -->
<!-- 		</selectKey> -->
<!-- 		INSERT INTO EMP( -->
<!-- 			    EMP_NUM, EMP_ADDR, EMP_PNE, EMP_NM, EMP_PAY -->
<!-- 			    <if test="empMjNum!=null and empMjNum!=''"> -->
<!-- 			    , EMP_MJ_NUM -->
<!-- 			    </if> -->
<!-- 		)VALUES( -->
<!-- 			    #{empNum}, #{empAddr}, #{empPne}, #{empNm}, #{empPay} -->
<!-- 			    <if test="empMjNum!=null and empMjNum!=''"> -->
<!-- 			    , #{empMjNum} -->
<!-- 			    </if> -->
<!-- 		) -->
<!-- 	</insert> -->
	
	<!-- 모든 직원 정보 가져오기 -->
	<select id="getEmpAll" resultType="empVO">
		SELECT EMP_NUM, EMP_ADDR, EMP_PNE, EMP_NM, EMP_PAY, EMP_MJ_NUM
		FROM EMP
		ORDER BY EMP_NUM
	</select>
	
	<!-- 직원 상세 보기(관리자가 있으면 관리자 정보도 포함)
	드루와 : empVO{empNum:EMP006, empAddr:null, empPne:null...}
	가즈아 : empVO[[empNum:EMP006, empAddr:대전, empPne:010...]
				   [empNum:EMP002, empAddr:대전, empPne:010...]]
	 -->
	<select id="detail" parameterType="empVO" resultType="empVO">
		SELECT EMP_NUM, EMP_ADDR, EMP_PNE, EMP_NM, EMP_PAY, EMP_MJ_NUM
		FROM EMP
		START WITH EMP_NUM = #{empNum}
		CONNECT BY EMP_NUM = PRIOR EMP_MJ_NUM
		ORDER BY EMP_NUM
		
<!-- 		SELECT A.EMP_NUM, A.EMP_ADDR, A.EMP_PNE, A.EMP_NM, A.EMP_PAY, A.EMP_MJ_NUM -->
<!-- 		FROM EMP A -->
<!-- 		WHERE A.EMP_NUM = #{empNum} -->
<!-- 		OR A.EMP_NUM = (SELECT B.EMP_MJ_NUM FROM EMP B WHERE B.EMP_NUM = #{empNum}) -->
	</select>
	
	<delete id="deletePost" parameterType="empVO">
		DELETE FROM EMP WHERE EMP_NUM = #{empNum}
	</delete>
	
	<select id="list" parameterType="hashmap" resultType="empVO">
<!-- 		SELECT A.EMP_NUM, A.EMP_ADDR, A.EMP_PNE, A.EMP_NM, A.EMP_PAY,  -->
<!-- 		        A.EMP_MJ_NUM, B.EMP_NM AS EMP_MJ_NM -->
<!-- 		FROM EMP A, EMP B -->
<!-- 		WHERE A.EMP_MJ_NUM = B.EMP_NUM(+) -->
		
		SELECT *
		FROM (
		        WITH T AS(
		                SELECT A.EMP_NUM, A.EMP_ADDR, A.EMP_PNE, A.EMP_NM, A.EMP_PAY, A.EMP_MJ_NUM,
		                        (SELECT B.EMP_NM FROM EMP B WHERE B.EMP_NUM = A.EMP_MJ_NUM) EMP_MJ_NM
		                FROM EMP A
		                START WITH A.EMP_MJ_NUM IS NULL
		                CONNECT BY PRIOR A.EMP_NUM = A.EMP_MJ_NUM
		        )
		        SELECT ROWNUM RNUM, T.EMP_NUM, T.EMP_ADDR, T.EMP_PNE, 
		               T.EMP_NM, T.EMP_PAY, T.EMP_MJ_NUM, T.EMP_MJ_NM
		        FROM T
		        WHERE 1=1
		        <include refid="search" />
		    ) U
		WHERE U.RNUM BETWEEN (#{currentPage} * #{show}) - (#{show} - 1) AND (#{currentPage} * #{show})
	</select>
	
	<select id="showMj" parameterType="empVO" resultType="empVO">
		SELECT EMP_NUM, EMP_ADDR, EMP_PNE, EMP_NM, EMP_PAY, EMP_MJ_NUM
		FROM EMP
		WHERE EMP_NUM = #{empNum}
	</select>
	
	<select id="getTotal" parameterType="hashMap" resultType="int">
		WITH T AS(
		        SELECT A.EMP_NUM, A.EMP_ADDR, A.EMP_PNE, A.EMP_NM, A.EMP_PAY, A.EMP_MJ_NUM,
		        		(SELECT B.EMP_NM FROM EMP B WHERE B.EMP_NUM = A.EMP_MJ_NUM) EMP_MJ_NM
				FROM EMP A
				START WITH A.EMP_MJ_NUM IS NULL
				CONNECT BY PRIOR A.EMP_NUM = A.EMP_MJ_NUM
		)
		SELECT COUNT(*) 
		FROM T
		WHERE 1=1
		<include refid="search" />
	</select>
	
	<sql id="search">
		<if test="keyword != null and keyword != ''">
		AND (
				T.EMP_NUM    LIKE '%'|| #{keyword} ||'%'
		    OR 	T.EMP_NM     LIKE '%'|| #{keyword} ||'%'
		    OR 	T.EMP_MJ_NUM LIKE '%'|| #{keyword} ||'%'
		)
	    </if>
	</sql>
</mapper>